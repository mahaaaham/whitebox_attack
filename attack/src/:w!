#include "attack_aes_whitebox.h"

#include "tables.h"
#include "sbox.h"
#include "dtables.h"

#include <unistd.h> /* for open and close */
#include <sys/stat.h>  /* to read /dev/urandom */
#include <fcntl.h>  /* to read /dev/urandom */
#include <stdint.h>

#include <string.h>
#include <stdio.h>
#include <stdlib.h>
#include "ctype.h" // for "isspace"

uint8_t 
compute_difference (uint8_t state, uint8_t mod_state, uint8_t chunk_last_round_key)
  {
    uint8_t result = inv_sbox[state ^ chunk_last_round_key];
    result ^= inv_sbox[mod_state ^ chunk_last_round_key];
    return result;
  }

uint8_t
random_byte ()
{
  uint8_t buffer;
  int fd = open("/dev/urandom", O_RDONLY);
  read (fd, &buffer, 1);
  close (fd);
  return buffer;
}

/* buffer has to contains 16 bytes */
void
encrypt (uint8_t *buffer)
{
  uint8_t s[42];

  memcpy(s, buffer, 16);

  #include "instr.c"

  memcpy(buffer, s, 16);
  return;
}

/* buffer has to contains 16 bytes */
void
mod_encrypt (uint8_t *buffer)
{
  uint8_t byte_error_1 = random_byte ();
  uint8_t byte_error_2 = random_byte ();

  uint8_t s[42];

  memcpy(s, buffer, 16);

  #include "mod_instr.c"

  memcpy(buffer, s, 16);
  return;
}

void
read_from_file (char *input_file, uint8_t *buffer)
{
  int cpt = 0;
  FILE *fptr;
  fptr = fopen(input_file, "r");

  char tmp_char[2];
  uint8_t nb;

  if (fptr == NULL)
    {
      printf("Erreur lors de l'ouverture du fichier");
    }

  // any value different than EOF
  tmp_char[0] = 'a';
   while (tmp_char[0] != EOF)
     {
       tmp_char[0] = fgetc(fptr);
       tmp_char[1] = fgetc(fptr);
       nb =  strtol(&tmp_char, NULL, 16);
       buffer[cpt] = nb;
       cpt++;

       // there has to be exactly one space between the numbers
       tmp_char[0] = fgetc(fptr);
       if ((tmp_char[0] != EOF) && (isspace(tmp_char[0]) == 0))
	 {
	   printf ("Mauvais format du fichier d'entr√©e");
	 }

     }
   return; 
}


int
main (int argc, char **argv)
{
  uint8_t state[16];
  uint8_t mod_state[16];
  uint8_t chunk_key = 0; /* to try to find chunk of keys */
  uint8_t last_round_key[16]; /* the Graal we are searching */


  char *text = "input_file";

  /* uint8_t input[16] = {0x57, 0x68, 0x6f, 0x20, 0x49, 0x73, 0x20, 0x52, */ 
  /*                      0x69, 0x6a, 0x6e, 0x64, 0x61, 0x65, 0x6c, 0x20}; */
  read_from_file (text, &state[0]);

  /* mod state is the same than state, but will be utilised by mod_instr, and
     so, a difference will be put into it */
  for (int i = 0; i < 16; i++)
    {
      mod_state[i] = state[i];
    }


  encrypt (&state[0]);
  mod_encrypt (&mod_state[0]);


  /* Try to find K0, K7, K10, K13 (with error in column 1) */


  for (uint8_t key_i = 0; key_i < 256; key_i++)
    {
      for (uint8_t key_j = 0; key_j < 256; key_j++)
	{
	  for (uint8_t key_k = 0; key_k < 256; key_k++)
	    {
	      for (uint8_t key_l = 0; key_l < 256; key_l++)
		{
		  compute_difference(state[0], mod_state[0], key_i);
		  compute_difference(state[7], mod_state[7], key_j;
		  compute_difference(state[10], mod_state[10], key_k);
		  compute_difference(state[13], mod_state[13], key_l);

  /* Try to find K4, K11, K14, K1 (with error in column 2) */

  /* compute_difference(state[4], mod_state[4], chunk_key[0]); */
  /* compute_difference(state[11], mod_state[11], chunk_key[1]); */
  /* compute_difference(state[14], mod_state[14], chunk_key[2]); */
  /* compute_difference(state[1], mod_state[1], chunk_key[3]); */

  /* Try to find K8, K15, K2, K5 (with error in column 3) */

  /* compute_difference(state[8], mod_state[8], chunk_key[0]); */
  /* compute_difference(state[15], mod_state[15], chunk_key[1]); */
  /* compute_difference(state[2], mod_state[2], chunk_key[2]); */
  /* compute_difference(state[5], mod_state[5], chunk_key[3]); */

  /* Try to find K12, K3, K6, K9 (with error in column 4) */

  /* compute_difference(state[12], mod_state[12], chunk_key[0]); */
  /* compute_difference(state[3], mod_state[3], chunk_key[1]); */
  /* compute_difference(state[6], mod_state[6], chunk_key[2]); */
  /* compute_difference(state[9], mod_state[9], chunk_key[3]); */

  printf("Differences are:\n ");
  for (int i = 0; i<16; i++)
    {
      printf("%x ", compute_difference(state[i], state[i], key));
    }

  printf("\n State is:\n ");
  for (int i = 0; i<16; i++)
    {
      printf("%x ", state[i]);
    }

  printf("\n Modified State is:\n ");
  for (int i = 0; i<16; i++)
    {
      printf("%x ", mod_state[i]);
    }

  return EXIT_SUCCESS;
}

/*
  The example in the README is:
plaintext :   57 68 6f 20 49 73 20 52 69 6a 6e 64 61 65 6c 20
ciphertext : 4b 95 f3 2b d1 9c ca 0a 81 64 9c 13 05 5d c9 f2
*/
